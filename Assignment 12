Web Development
In this Challenge assignment, you'll review many of the concepts and tools that we've covered in the Web Development module. If needed, feel free to use the following reference sheets:

HTTP Reference SheetLinks to an external site.
curl Reference SheetLinks to an external site.
As you work through the questions below, fill out your answers in the Module 12 Challenge Submission FileLinks to an external site. (make a copy of the file to work from). You will submit this completed document as your Challenge deliverable.

HTTP Requests and Responses
Answer the following questions about the HTTP request and response process:

What type of architecture does the HTTP request and response process occur in?

What are the parts of an HTTP request?

Which part of an HTTP request is optional?

What are the three parts of an HTTP response?

Which number class of status codes represents errors?

What are the two most common request methods a security professional encounters?

Which type of HTTP request method is used to send data?

Which part of an HTTP request contains the data being sent to the server?

In which part of an HTTP response does the browser receive the web code to generate and style a webpage?

Using curl
Answer the following questions about curl:

What are the advantages of using curl over the browser?

Which curl option changes the request method?

Which curl option sets request headers?

Which curl option is used to view the response header?

Which request method might an attacker use to figure out what HTTP requests an HTTP server will accept?

Sessions and Cookies
Recall that HTTP servers need to be able to recognize and distinguish clients. They do this through sessions and cookies.

Answer the following questions about sessions and cookies:

Which response header sends a cookie to the client?

HTTP/1.1 200 OK
Content-type: text/html
Set-Cookie: cart=Bob
Which request header will continue the client's session?

GET /cart HTTP/1.1
Host: www.example.org
Cookie: cart=Bob
Example HTTP Requests and Responses
Use the following sample HTTP request and response to answer the questions in this section:

HTTP Request

POST /login.php HTTP/1.1
Host: example.com
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 34
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Mobile Safari/537.36

username=Barbara&password=password
What is the request method?

Which header expresses the client's preference for an encrypted response?

Does the request have a user session associated with it?

What kind of data is being sent from this request body?

HTTP Response

HTTP/1.1 200 OK
Date: Mon, 16 Mar 2020 17:05:43 GMT
Last-Modified: Sat, 01 Feb 2020 00:00:00 GMT
Content-Encoding: gzip
Expires: Fri, 01 May 2020 00:00:00 GMT
Server: Apache
Set-Cookie: SessionID=5
Content-Type: text/html; charset=UTF-8
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Content-Type: NoSniff
X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block

[page content]
What is the response status code?

What web server is handling this HTTP response?

Does this response have a user session associated with it?

What kind of content is likely to be in the [page content] response body?

If your class covered security headers, what security request headers have been included?

Monoliths and Microservices
Answer the following questions about monoliths and microservices:

What are the individual components of microservices called?

What is a service that writes to a database and communicates to other services?

What type of underlying technology allows for microservices to become scalable and have redundancy?

Deploy and Test a Container Set
Answer the following questions about multi-container deployment:

What tool can you use to deploy multiple containers at once?

What kind of file format is required to deploy a container set?

Databases
Which type of SQL query would you use to view all the information in a table called customers?

Which type of SQL query would you use to enter new data into a table? (You don't need a full query, just the first part of the statement.)

Why would you never run DELETE FROM <table-name>; by itself?

Optional Additional Challenge Activity: The Cookie Jar
For this challenge, you'll once again use curl, but this time you'll use it to manage and swap sessions.

⚠️ Head's Up: In order to complete this activity, you must have WordPress set up from the swapping sessions activity on Day 1 of this module. If you have not completed the activity or WordPress is improperly set up, please refer to the Day 1 student guide and the swapping sessions activity file.

Recall that on Day 1 of this module, you used Google Chrome's Cookie-Editor extension to swap sessions and cookies. For this Challenge activity, you'll use the command-line tool curl to practice swapping cookies and sessions in the WordPress app.

It is important for cybersecurity professionals to know how to manage cookies with curl.

Web application security engineers need to regularly ensure cookies are both functional and safe from tampering.

For example, you might need to request a cookie from a webpage and then test various HTTP responses using that cookie. Doing this over and over through the browser is tedious, but it can be automated with scripts.
The same concept applies for penetration testers and hackers: curl is used to quickly save a cookie in order to test various exploits.

For example, an HTTP server can be configured so that, in order to POST data to specific pages, clients need to have cookies or authentication information set in their request headers, which the server verifies.
Revisit curl
Recall that you used curl to craft different kinds of requests for your curl activity and used the Chrome extension Cookie-Editor to export and import cookies and swap sessions.

There will be many systems in which you will test requests and cookies that will not connect to a browser or browser extension.

curl not only allows users to examine headers, send data, and authenticate to servers but also to save and send cookies through two curl options: --cookie-jar and --cookie.

These two options work just like Cookie-Editor, but on the command line:

--cookie-jar allows a curl user to save the cookies set in a response header into a text file.

--cookie allows a user to specify a text file where a cookie is saved in order to send a request with the cookies embedded in the request header.

Let's create a curl command that logs in to a webpage with a supplied username and password and then let's save the server's response that should contain a cookie.

Log In and Save Cookies with curl
If you want to use the curl command to log in to an account called Amanda with the password password, use the following curl options: curl --cookie-jar ./amandacookies.txt --form "log=Amanda" --form "pwd=password" http://localhost:8080/wp-login.php --verbose

curl: The tool that you are using

--cookie-jar: Specifies where you will save the cookies.

./amandacookies.txt: Location and file where the cookies will be saved.

--form: Lets you pick the login username and password forms that you set in your user info earlier. In this case, it's your username.

log=Amanda: How WordPress understands and accepts usernames

--form: Lets you pick the login username and password forms that you set in our user info earlier. In this case, it's your password.

pwd=password: How WordPress understands and accepts passwords

http://localhost:8080/wp-login.php: Your WordPress login page

--verbose: Outputs a more specific description about the actions the command is taking

Run the command curl --cookie-jar ./amandacookies.txt --form "log=Amanda" --form "pwd=password" http://localhost:8080/wp-login.php --verbose

If the site confirms your credentials, it will give you a cookie in return, which curl will save in the cookie jar file ./amandacookies.txt.

Now, let's use that saved cookie on a page that requires you to be logged in.

Use a Saved Cookie
To use a saved cookie, use the following curl syntax:

curl --cookie ./amandacookies.txt http://localhost:8080/wp-admin/users.php

curl: The tool that you are using

--cookie: Precedes the location of your saved cookie that you want to use

./amandacookies.txt: Location and file where the cookies are saved

http://localhost:8080/wp-admin/users.php: A page that requires authentication in order to view it properly. Note that you are not going to the login page, because supplying a cookie in this instance assumes that you are already logged in.

Now that you know how to use the curl cookie jar, you can complete this optional activity.

Optional Additional Challenge Activity Instructions: The Cookie Jar
Using Docker Compose, navigate to the Day 1 WordPress activity directory and bring up the container set /home/sysadmin/Documents/docker_files.

Using curl, do the following for a user named Ryan:

Log in to WordPress and save the user's cookies to a cookie jar.

Test a WordPress page by using a cookie from the cookie jar.

Pipe the output from the cookie with grep to check for authenticated page access.

Attempt to access a privileged WordPress admin page.

Step 1: Setup
Create two new users: Amanda and Ryan.

Navigate to localhost:8080/wp-admin/.

On the left-hand toolbar, hover over "Users" and click "Add New."

Enter the following information to create the new user named Amanda:

Username: Amanda
Email: amanda@email.com
Skip down to password:

Password: password
Confirm Password: Check the box to confirm use of weak password.
Role: Administrator
Create another user named Ryan.

Username: Ryan
Email: ryan@email.com
Skip down to password:

Password: 123456
Confirm Password: Check the box to confirm use of weak password.
Role: Editor
Log out, and log in with the following credentials:

Username: Amanda
Password: password
Step 2: Baseline
For these "baselining" steps, you'll log in to two different types of accounts to see how the WordPress site looks at the localhost:8080/wp-admin/users.php page. You want to see how the Users page looks from the perspective of an administrator vs. a regular user.

Using your browser, log in to your WordPress site as your sysadmin account and navigate to localhost:8080/wp-admin/users.php, where you previously created the user Ryan. Examine this page briefly. Log out.

Using your browser, log in to your Ryan account and attempt to navigate to localhost:8080/wp-admin/index.php. Note the wording on your Dashboard.

Attempt to navigate to localhost:8080/wp-admin/users.php. Note what appears now.

Log out in the browser.

Step 3: Forms and a Cookie Jar
Navigate to ~/Documents in a terminal to save your cookies.

Construct a curl request that enters two forms, "log={username}" and "pwd={password}", and goes to http://localhost:8080/wp-login.php. Enter Ryan's credentials where there are placeholders.

Question 1: Did you see any obvious confirmation of a login? (Y/N)
Construct the same curl request, but this time, add the option and path to save your cookie: --cookie-jar ./ryancookies.txt. This option tells curl to save the cookies to the ryancookies.txt text file.

Read the contents of the ryancookies.txt file.

Question 2: How many items exist in this file?
Note that each one of these is a cookie that was granted to Ryan after logging in.

Step 4: Log in Using Cookies
Craft a new curl command that now uses the --cookie option, followed by the path to your cookies file. For the URL, use http://localhost:8080/wp-admin/index.php.

Question 3: Is it obvious that you can access the dashboard? (Y/N)
Press the up arrow on your keyboard to run the same command, but this time, pipe | grep Dashboard to the end of your command to return all instances of the word Dashboard on the page.

Question 4: Look through the output where Dashboard is highlighted. Does any of the wording on this page seem familiar? (Y/N) If so, you should be successfully logged in to your Editor's dashboard.
Step 5: Test the Users.php Page
Finally, write a curl command using the same --cookie ryancookies.txt option, but attempt to access http://localhost:8080/wp-admin/users.php.

Question 5: What happens this time?
Important Note Regarding Module 13
Please make sure that you are set up on your personal Azure account prior to the first day of the Cloud Security module. Use the following setup guide for assistance: Setup GuideLinks to an external site..
